<?php

declare(strict_types=1);

namespace SousedskaPomoc\Presenters;

use Contributte\FormsBootstrap\BootstrapForm;
use SousedskaPomoc\Entities\Orders;
use SousedskaPomoc\Repository\OrderRepository;
use SousedskaPomoc\Repository\VolunteerRepository;

final class CoordinatorPresenter extends BasePresenter
{
    /** @var OrderRepository */
	protected $orderRepository;

	/** @var VolunteerRepository */
	protected $volunteerRepository;

	public function injectVolunteerRepository(VolunteerRepository $volunteerRepository) {
		$this->volunteerRepository = $volunteerRepository;
	}


	public function injectOrderRepository(OrderRepository $orderRepository) {
		$this->orderRepository = $orderRepository;
	}

	public function beforeRender()
	{
		parent::beforeRender(); // TODO: Change the autogenerated stub
		if (!$this->user->isLoggedIn()) {
			$this->redirect('Homepage:default');
		}
	}

    public function renderPrintMaterial($id)
    {
        $this->template->id = $id;
    }



    public function renderDashboard()
    {
        $this->template->orders = $this->orderRepository->findAllForUser($this->user->getId());
    }



    public function renderDetail($id)
    {

        $this->template->order = $this->orderRepository->getById($id);
    }



	public function createComponentPostOrder()
	{
		$form = new BootstrapForm();
		$form->addText('pickup_address', $this->translator->translate('forms.postOrder.pickupAddressLabel'))
			->setPlaceholder($this->translator->translate('forms.postOrder.pickupAddressPlaceholder'));
		$form->addText('delivery_address', $this->translator->translate('forms.postOrder.addressLabel'))
			->setRequired($this->translator->translate('forms.postOrder.addressRequired'))
			->setPlaceholder($this->translator->translate('forms.postOrder.addressPlaceholder'));
		$form->addText('delivery_phone', $this->translator->translate('forms.postOrder.phoneLabel'))
			->setPlaceholder($this->translator->translate('forms.postOrder.phonePlaceholder'));
		$form->addText('note',
			$this->translator->translate('forms.postOrder.noteLabel'))
			->setPlaceholder($this->translator->translate('forms.postOrder.notePlaceholder'));
		$form->addHidden('courier_note')
			->setDefaultValue('');
		$form->addTextArea('order_items', $this->translator->translate('forms.postOrder.itemsLabel'))
			->setHtmlAttribute('rows', 3);
		$form->addSubmit('postOrderFormSubmit', $this->translator->translate('forms.postOrder.button'));
		$form->onSuccess[] = [$this, "postOrder"];

        return $form;
    }



    public function postOrder(BootstrapForm $form)
    {
        $values = $form->getValues();

        /** @var Orders $order */
        $order = new Orders();
        $user = $this->volunteerRepository->getById($this->user->getId());
        $order->setAuthor($user);
        $order->setStatus('new');
        $order->setDeliveryAddress($values->delivery_address);
        $order->setDeliveryPhone($values->delivery_phone);
        $order->setCustomerNote($values->note);
        $order->setItems($values->order_items);

        $this->orderRepository->create($order);
        $this->flashMessage($this->translator->translate('messages.order.orderSuccess'));
        $this->redirect("Coordinator:dashboard");
    }
}
