<?php

declare(strict_types=1);

namespace SousedskaPomoc\Presenters;

use Contributte\FormsBootstrap\BootstrapForm;
use SousedskaPomoc\Model\OrderManager;
use SousedskaPomoc\Repository\OrderRepository;

final class CoordinatorPresenter extends BasePresenter
{
    /** @var \SousedskaPomoc\Model\OrderManager */
    protected $orderManager;

    /** @var \SousedskaPomoc\Repository\OrderRepository */
    protected $orderRepository;

    public function beforeRender()
    {
        parent::beforeRender(); // TODO: Change the autogenerated stub

        if (!$this->user->isLoggedIn()) {
            $this->redirect('Homepage:default');
        }
    }

    public function injectOrderRepository(OrderRepository $orderRepository)
    {
        $this->orderRepository = $orderRepository;
    }

    public function injectOrderManager(OrderManager $orderManager)
    {
        $this->orderManager = $orderManager;
    }


    public function renderPrintMaterial($id)
    {
        $this->template->id = $id;
    }


    public function renderDashboard()
    {
        $this->template->orders = $this->orderManager->findAllForUser($this->user->getId());
    }


    public function renderDetail($id)
    {
        $this->template->order = $this->orderRepository->getById($id);
    }


    public function createComponentPostOrder()
    {
        $form = new BootstrapForm();
        $form->addText('pickup_address', $this->translator->translate('forms.postOrder.pickupAddressLabel'))
            ->setPlaceholder($this->translator->translate('forms.postOrder.pickupAddressPlaceholder'));
        $form->addText('delivery_address', $this->translator->translate('forms.postOrder.addressLabel'))
            ->setRequired($this->translator->translate('forms.postOrder.addressRequired'))
            ->setPlaceholder($this->translator->translate('forms.postOrder.addressPlaceholder'));
        $form->addText('delivery_phone', $this->translator->translate('forms.postOrder.phoneLabel'))
            ->setPlaceholder($this->translator->translate('forms.postOrder.phonePlaceholder'));
        $form->addText(
            'note',
            $this->translator->translate('forms.postOrder.noteLabel')
        )->setPlaceholder($this->translator->translate('forms.postOrder.notePlaceholder'));
        $form->addHidden('courier_note')
            ->setDefaultValue('');
        $form->addTextArea('order_items', $this->translator->translate('forms.postOrder.itemsLabel'))
            ->setHtmlAttribute('rows', 3);
        $form->addSubmit('postOrderFormSubmit', $this->translator->translate('forms.postOrder.button'));
        $form->onSuccess[] = [$this, "postOrder"];

        return $form;
    }


    public function postOrder(BootstrapForm $form)
    {
        $values = $form->getValues();

        $values->town = $this->userManager->getTownForUser($this->user->getId());
        $values->id_volunteers = $this->user->getId();
        $values->status = "new";

        $result = $this->orderManager->create($values);
        $this->flashMessage($this->translator->translate('messages.order.orderSuccess'));
        $this->redirect("Coordinator:dashboard");
    }
}
